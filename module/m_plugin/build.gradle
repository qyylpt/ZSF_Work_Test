if (rootProject.ext.isBate) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

// 项目根目录自定义插件 TEST
apply from: '../../plugin/CustomizePluginGradle/customize.gradle'

// 本地自定义maven插件 （plugin/customize_plugin_one 本地插件工程）
apply plugin: 'com.zsf.customize_plugin_one'

// 本地自定义maven插件 （plugin/customize_plugin_one 本地插件工程）
apply plugin: 'com.zsf.custom_plugin_clear_res'

lintCleaner {
    lintXmlPath "${buildDir}/reports/lint-results.xml"
    outputPath "${buildDir}/reports/lintCleanerLog.txt"
}

android {
    compileSdkVersion rootProject.ext.versions.compileSdkVersion
    buildToolsVersion rootProject.ext.versions.buildToolsVersion


    defaultConfig {
        if (rootProject.ext.isBate) {
            applicationId "com.zsf.m_plugin"
        }
        minSdkVersion rootProject.ext.versions.minSdkVersion
        targetSdkVersion rootProject.ext.versions.targetSdkVersion
        versionCode rootProject.ext.versions.versionCode
        versionName rootProject.ext.versions.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        /**
         * ARouter路由设置
         * AROUTER_GENERATE_DOC: "enable"：生成路由文档
         */
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName(), AROUTER_GENERATE_DOC: "enable"]
                includeCompileClasspath = true
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // 依赖基础库通用库
    implementation project(path: ':common')

    // ARouter 解释器 （必须在所需要的module中单独添加）
    annotationProcessor rootProject.ext.dependencies["arouter-compiler"]

}